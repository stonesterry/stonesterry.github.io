{"meta":{"title":"stonesterry","subtitle":"linux/filesystem","description":"filesystem","author":"stonesterry","url":"http://stonesterry.cn","root":"/"},"pages":[{"title":"c_container_of","date":"2020-04-29T14:21:23.000Z","updated":"2020-04-29T14:21:23.953Z","comments":true,"path":"c-container-of/index.html","permalink":"http://stonesterry.cn/c-container-of/index.html","excerpt":"","text":""},{"title":"test_page","date":"2020-04-28T14:01:18.000Z","updated":"2020-04-28T14:01:18.556Z","comments":true,"path":"test-page/index.html","permalink":"http://stonesterry.cn/test-page/index.html","excerpt":"","text":""}],"posts":[{"title":"c_container_of","slug":"c-container-of","date":"2020-04-29T13:04:27.000Z","updated":"2020-04-29T14:20:38.848Z","comments":true,"path":"2020/04/29/c-container-of/","link":"","permalink":"http://stonesterry.cn/2020/04/29/c-container-of/","excerpt":"","text":"作用通过结构体变量的某个成员的地址来获取整个结构体的首地址 解析以linux4.19的container_of为例 123456789101112131415/** * container_of - cast a member of a structure out to the containing structure * @ptr: the pointer to the member. * @type: the type of the container struct this is embedded in. * @member: the name of the member within the struct. * */#define container_of(ptr, type, member) (&#123; \\ void *__mptr = (void *)(ptr); \\ BUILD_BUG_ON_MSG(!__same_type(*(ptr), ((type *)0)-&gt;member) &amp;&amp; \\ !__same_type(*(ptr), void), \\ \"pointer type mismatch in container_of()\"); \\ ((type *)(__mptr - offsetof(type, member))); &#125;)#define offsetof(TYPE, MEMBER) ((size_t)&amp;((TYPE *)0)-&gt;MEMBER) ptr:指向结构体member成员的指针type:member成员所在结构体的数据类型member:结构体成员为member的变量 首先定义了一个(void *)的指针 BUILD_BUG_ON_MSG的作用是防御性的判断，判断类型是否一致，若不一致则会报错 ((type *)(__mptr - offsetof(type, member)))这是整个container_of的核心,即得到结构体的首地址，对offsetof(type, member)进行展开123456#define offsetof(TYPE, MEMBER) ((size_t)&amp;((TYPE *)0)-&gt;MEMBER)&amp;((TYPE *)0)-&gt;MEMBER:将0地址转换为TYPE型的，然后取出其MEMBER成员的地址。换句话说得到MEMBER成员相对于结构体首地址的相对偏移量。需要说明一点的是__mptr变量的结构类型为(void *)是有特殊含义的,我们知道指针变量进行加减运算时，实际上是以指针指向数据类型的size进行操作的。如int *p;p++;(p+sizeof(int)) 测试 源码12345678910111213141516171819202122232425#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;typedef struct test_container_of&#123; char a; int b; double c;&#125;tag_test_container_of;int main()&#123; tag_test_container_of test_var; printf(\"test_var addr= 0x%p\\n\", &amp;test_var); printf(\"test_var.c addr=0x%p\\n\", &amp;test_var.c); printf(\"offset c in tag_test_container_of is %d\\n\", (long long)(&amp;(((tag_test_container_of*)0)-&gt;c))); printf(\"addr test_var.c - offset c in tag_test_container_of = 0x%x\\n\", (&amp;test_var.c)- (int)(&amp;(((tag_test_container_of*)0)-&gt;c))); printf(\"addr test_var.c - offset c in tag_test_container_of = 0x%x\\n\", (void *)(&amp;test_var.c)- (char)(&amp;(((tag_test_container_of*)0)-&gt;c))); return 0;&#125; 结果 test_var addr= 0x000000000062FE10test_var.c addr=0x000000000062FE18offset c in tag_test_container_of is 8addr test_var.c - offset c in tag_test_container_of(type=int) = 0x62fdd8 (0x000000000062FE18-8sizeof(int))addr test_var.c - offset c in tag_test_container_of(type=char) = 0x62fe10 (0x000000000062FE18-8sizeof(char))","categories":[],"tags":[]},{"title":"《活着》","slug":"tags","date":"2020-04-28T11:49:23.000Z","updated":"2020-04-28T16:10:49.273Z","comments":true,"path":"2020/04/28/tags/","link":"","permalink":"http://stonesterry.cn/2020/04/28/tags/","excerpt":"","text":"自序里面提到“人是为活着本身而活着的，而不是为了活着之外的任何事物所活着”,自己对这句话没有理解到，为什么不是为了活着之外的事物所活着呢？人生理想，金钱，权力等都可以是之外的事物，而如果我们不追求这些又有什么意义呢？即使是“采菊东篱下”，也是为了追求一种恬然的境界。读完本书之后觉得与三观卖血相比,确实显得很悲情，生命渺小，人生无常。（锻炼身体，珍惜眼前人）“我看到广阔的土地袒露着结实的胸膛，那是召唤的姿态，就像女人召唤着她们的儿女，土地召唤黑夜降临”，让我想起小时候的一些场景，夏天里，黄昏时刻，黑夜即将到来，乡下的田野路上，虫叫 蛙叫声已经此起彼伏（不能这样形容）了，农忙人停止了黄牛在田里的耕种（寒暄），或把牛拉到河边让其洗澡，或给它们喂食以犒劳其辛勤劳动。呼喊着还在田埂上追逐跑跳的孩童回家吃饭渐渐地，明月，黑夜，远处人家的灯，虫叫声，祥和。","categories":[],"tags":[{"name":"文学阅读","slug":"文学阅读","permalink":"http://stonesterry.cn/tags/%E6%96%87%E5%AD%A6%E9%98%85%E8%AF%BB/"}]}],"categories":[],"tags":[{"name":"文学阅读","slug":"文学阅读","permalink":"http://stonesterry.cn/tags/%E6%96%87%E5%AD%A6%E9%98%85%E8%AF%BB/"}]}